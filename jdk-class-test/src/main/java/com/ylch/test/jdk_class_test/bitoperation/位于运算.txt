二进制中的原码、反码、补码
      对于有符号数而言：
      (1)二进制的最高位是符号位：0表示正数，1表示负数
      (2)正数的原码、反码、补码都一样；
      (3)负数的反码 =  它的原码符号位不变，其他位取反（0 ->1 ; 1->0 ）；
      (4)负数的补码 = 它的反码 +1；
      (5)0的反码、补码都是0；
      (6)在计算机运算的时候，都是以补码的方式来运算的；

      在Java中一共有8种基本数据类型，其中有4种整型，2种浮点类型，1种用于表示Unicode编码的字符单元的字符类型和1种用于表示真值的boolean类型。（一个字节等于8个bit）

      1.整型
      类型              存储需求     bit数    取值范围      备注
      int               4字节         4*8
      short             2字节         2*8    －32768～32767
      long              8字节         8*8
      byte              1字节         1*8     －128～127

      2.浮点型
      类型              存储需求     bit数    取值范围      备注
      float             4字节         4*8                  float类型的数值有一个后缀F(例如：3.14F)
      double            8字节         8*8                       没有后缀F的浮点数值(如3.14)默认为double类型

      3.char类型
      类型              存储需求     bit数     取值范围      备注
      char              2字节         2*8

      4.boolean类型
      类型              存储需求    bit数    取值范围      备注
      boolean           1字节         1*8      false、true


public static void main(String[] args) {
		// 1、左移( << )
		// 0000 0000 0000 0000 0000 0000 0000 0101 然后左移2位后，低位补0：//
		// 0000 0000 0000 0000 0000 0000 0001 0100 换算成10进制为20
		System.out.println(5 << 2);// 运行结果是20

		// 2、右移( >> ) 高位补符号位
		// 0000 0000 0000 0000 0000 0000 0000 0101 然后右移2位，高位补0：
		// 0000 0000 0000 0000 0000 0000 0000 0001
		System.out.println(5 >> 2);// 运行结果是1

		// 3、无符号右移( >>> ) 高位补0
		// 例如 -5换算成二进制后为：0101 取反加1为1011
		// 1111 1111 1111 1111 1111 1111 1111 1011
		// 我们分别对5进行右移3位、 -5进行右移3位和无符号右移3位：
		System.out.println(5 >> 3);// 结果是0
		System.out.println(-5 >> 3);// 结果是-1
		System.out.println(-5 >>> 3);// 结果是536870911

		// 4、位与( & )
		// 位与：第一个操作数的的第n位于第二个操作数的第n位如果都是1，那么结果的第n为也为1，否则为0
		System.out.println(5 & 3);// 结果为1
		System.out.println(4 & 1);// 结果为0

		// 5、位或( | )
		// 第一个操作数的的第n位于第二个操作数的第n位 只要有一个是1，那么结果的第n为也为1，否则为0
		System.out.println(5 | 3);// 结果为7

		// 6、位异或( ^ )
		// 第一个操作数的的第n位于第二个操作数的第n位 相反，那么结果的第n为也为1，否则为0
		 System.out.println(5 ^ 3);//结果为6

		// 7、位非( ~ )
		// 操作数的第n位为1，那么结果的第n位为0，反之。
		System.out.println(~5);// 结果为-6


         等比数列求和
             a1-an*q
        Sn=  --------
             1-q




